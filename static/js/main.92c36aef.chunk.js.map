{"version":3,"sources":["App.module.scss","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","RecordButton","PlayButton","StopButton","DownloadButton","SettingsButton","Hidden","VideoModal","App","state","stream","recorder","recording","undefined","chunks","config","playing","navigator","getDisplayMedia","video","mediaDevices","getUserMedia","mediaSource","this","displayMediaStream","addEventListener","event","_this2","stopCapture","screenRecorder","MediaRecorder","mimeType","setState","data","size","push","start","stop","getTracks","forEach","track","e","window","URL","createObjectURL","Blob","type","a","document","createElement","href","currentDate","Date","currentDateString","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","setAttribute","concat","click","_this3","_this$state","react_default","className","styles","onClick","controls","autoPlay","src","title","startCapture","play","disabled","downloadFile","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92c36aef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"App_Button__agX9A\",\"RecordButton\":\"App_RecordButton__3r3WB App_Button__agX9A\",\"PlayButton\":\"App_PlayButton__i2HSO App_Button__agX9A\",\"StopButton\":\"App_StopButton__25nxA App_Button__agX9A\",\"DownloadButton\":\"App_DownloadButton__DfY_X App_Button__agX9A\",\"SettingsButton\":\"App_SettingsButton__6jwR8 App_Button__agX9A\",\"Hidden\":\"App_Hidden__AGs9D\",\"VideoModal\":\"App_VideoModal__3ixHE\"};","import React from 'react';\nimport styles from './App.module.scss';\n\ntype State = {\n  stream: any,\n  recorder: any,\n  recording: any,\n  chunks: any[],\n  config: any,\n  playing: boolean,\n}\ntype Props = {}\nclass App extends React.Component<Props, State> {\n  state = {\n    stream: null,\n    recorder: null,\n    recording: undefined,\n    chunks: [] as any,\n    config: {},\n    playing: false,\n  }\n\n  getDisplayMedia() {\n    if (navigator.getDisplayMedia) {\n      return navigator.getDisplayMedia({video: true});\n      // @ts-ignore\n    } else if (navigator.mediaDevices.getDisplayMedia) {\n      // @ts-ignore\n      return navigator.mediaDevices.getDisplayMedia({video: true});\n    } else {\n      // @ts-ignore\n      return navigator.mediaDevices.getUserMedia({video: {mediaSource: 'screen'}});\n    }\n  }\n\n  async startCapture() {\n    const displayMediaStream = await this.getDisplayMedia();\n    displayMediaStream.addEventListener('inactive', (event:any) => {\n      this.stopCapture();\n    });\n\n    const screenRecorder = new MediaRecorder(displayMediaStream, {mimeType: 'video/webm'});\n    this.setState({\n      stream: displayMediaStream,\n      recorder: screenRecorder,\n      recording: undefined,\n      chunks: [],\n    });\n    screenRecorder.addEventListener('dataavailable', (event:any) => {\n      if (event.data && event.data.size > 0) {\n        this.state.chunks.push(event.data);\n      }\n    });\n    screenRecorder.start(10);\n  }\n\n  stopCapture() {\n    try {\n      // @ts-ignore\n      this.state.recorder.stop();\n      // @ts-ignore\n      this.state.stream.getTracks().forEach((track:any) => track.stop());\n    } catch (e) {\n    }\n    this.setState({\n      recorder: null,\n      stream: null,\n      recording: window.URL.createObjectURL(new Blob(this.state.chunks, {type: 'video/webm'})),\n    });\n  }\n\n  downloadFile() {\n    const a = document.createElement(\"a\");\n    // @ts-ignore\n    a.href = this.state.recording;\n    const currentDate = new Date();\n    const currentDateString = currentDate.getFullYear() + '-' + (currentDate.getMonth()+1) + '-' + currentDate.getDate() + ' at ' +\n    currentDate.getHours() + '.' + currentDate.getMinutes() + '.' + currentDate.getSeconds();\n    a.setAttribute('download', `ScreenRecording ${currentDateString}.webm`);\n    a.click();\n    return false;    \n  }\n\n  play() {\n    if(this.state.recording) {\n      this.setState({\n        playing: true,\n      });\n    }\n  }\n\n  stop() {\n    this.setState({\n      playing: false,\n    });\n  }\n\n  render() {\n    const { recorder, recording, playing } = this.state;\n    return (\n      <div className=\"App\">\n        {playing &&\n          <div className={styles.VideoModal}>\n            <button onClick={() => this.stop()}>Close</button>\n            <video controls autoPlay>\n              <source src={this.state.recording} type=\"video/webm\"/>\n            </video>\n          </div>\n        }\n        {recorder &&\n          <button onClick={() => this.stopCapture()} className={styles.StopButton} title='Stop' />\n        }\n        {!recorder &&\n          <button onClick={() => this.startCapture()} className={styles.RecordButton} title='Record'>Record</button>\n        }\n        <button onClick={() => this.play()} disabled={!recording} className={styles.PlayButton} title='Play'>Play</button>\n        <button disabled={!recording} className={styles.DownloadButton} onClick={() => this.downloadFile()} title='Download'>Download</button>\n        <button className={styles.Hidden} title='Settings'>Settings</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}